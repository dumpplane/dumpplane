[nginx]
conf.location = ${replacement.blank}location ${replacement.uri} {
        ${replacement.blank}${replacement.blank}set $service "${replacement.service}";
        ${replacement.blank}${replacement.blank}proxy_connect_timeout 60s;
        ${replacement.blank}${replacement.blank}proxy_read_timeout 60s;
        ${replacement.blank}${replacement.blank}proxy_send_timeout 60s;
        ${replacement.blank}${replacement.blank}client_max_body_size 10m;
        ${replacement.blank}${replacement.blank}proxy_buffering on;
        ${replacement.blank}${replacement.blank}proxy_http_version 1.1;
        ${replacement.blank}${replacement.blank}proxy_pass_request_headers on;
        ${replacement.blank}${replacement.blank}proxy_set_header X-Real-IP $remote_addr;
        ${replacement.blank}${replacement.blank}proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        ${replacement.blank}${replacement.blank}proxy_set_header X-Forwarded-Host $host;
        ${replacement.blank}${replacement.blank}proxy_set_header X-Forwarded-Port $server_port;
        ${replacement.blank}${replacement.blank}proxy_set_header X-Forwarded-Proto $scheme;
        ${replacement.blank}${replacement.blank}proxy_set_header Host "$host";
        ${replacement.blank}${replacement.blank}proxy_pass http://${replacement.proxy_pass};
        ${replacement.blank}${replacement.blank}proxy_next_upstream error timeout;
        ${replacement.blank}${replacement.blank}proxy_next_upstream_timeout 0s;
        ${replacement.blank}${replacement.blank}proxy_next_upstream_tries 0;
    ${replacement.blank}}
conf.location.hc = ${replacement.blank}location @hc-${replacement.proxy_pass} {
        ${replacement.blank}${replacement.blank}proxy_set_header Host "test.nginx.com";
        ${replacement.blank}${replacement.blank}proxy_connect_timeout 10s;
        ${replacement.blank}${replacement.blank}proxy_read_timeout 10s;
        ${replacement.blank}${replacement.blank}proxy_send_timeout 10s;
        ${replacement.blank}${replacement.blank}proxy_pass http://${replacement.proxy_pass};
        ${replacement.blank}${replacement.blank}health_check uri=/ port=8080 interval=20s jitter=3s fails=5 passes=5 match=${replacement.proxy_pass}_match mandatory persistent;
    ${replacement.blank}}
conf.match = match ${replacement.proxy_pass}_match {
    ${replacement.blank}status ! 500;
    }
conf.upstream.server = ${replacement.blank}server ${replacement.endpoint} max_fails=1 fail_timeout=10s max_conns=0;
conf.upstream.cookie = ${replacement.blank}sticky cookie ${replacement.upstream.cookie};
conf.upstream = upstream ${replacement.proxy_pass} {
    ${replacement.blank}zone ${replacement.proxy_pass} 512k;
    ${replacement.blank}random two least_conn;
    ${replacement.upstream.servers}
    ${replacement.upstream.persist}
    }
conf.server.security = ${replacement.blank}if ($enableSeclimit = "1") {
            ${replacement.blank}${replacement.blank}return 403;
    ${replacement.blank}}
conf.server = server {
    ${replacement.blank}listen ${replacement.server.port};
    ${replacement.blank}listen [::]:${replacement.server.port};
    ${replacement.blank}server_name ${replacement.server.host};
    ${replacement.blank}status_zone ${replacement.server.zone};
    ${replacement.blank}set $resource_type "${replacement.resource_type}";
    ${replacement.blank}set $resource_name "${replacement.resource_name}";
    ${replacement.blank}set $resource_namespace "${replacement.resource_namespace}";
    ${replacement.blank}server_tokens "off";
    ${replacement.server.security}
    ${replacement.locations}
    }
conf.server.api = server {
        ${replacement.blank}listen ${replacement.server.port};
        ${replacement.blank}listen [::]:${replacement.server.port};
        ${replacement.blank}root /usr/share/nginx/html;
        ${replacement.blank}access_log off;
        ${replacement.blank}location  = /dashboard.html {
        ${replacement.blank}}
        ${replacement.blank}allow ${replacement.server.allow};
        ${replacement.blank}deny all;
        ${replacement.blank}location /api {
            ${replacement.blank}${replacement.blank}api write=on;
        ${replacement.blank}}
    }
conf.main.events = events {
    ${replacement.blank}worker_connections  ${replacement.main.events.connections};
    }
conf.main = user  ${replacement.main.user};
    worker_processes  ${replacement.main.processes};
    ${replacement.enter}
    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    ${replacement.enter}
    ${replacement.main.events}
    ${replacement.enter}
    ${replacement.main.http}
conf.main.http.ws = ${replacement.blank}map $http_upgrade $connection_upgrade {
        ${replacement.blank}${replacement.blank}default upgrade;
        ${replacement.blank}${replacement.blank}''      close;
    ${replacement.blank}}
    ${replacement.blank}map $http_upgrade $vs_connection_header {
        ${replacement.blank}${replacement.blank}default upgrade;
        ${replacement.blank}${replacement.blank}''      $default_connection_header;
    ${replacement.blank}}
conf.main.http = http {
    ${replacement.blank}include       /etc/nginx/mime.types;
    ${replacement.blank}default_type  application/octet-stream;
    ${replacement.blank}log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    ${replacement.blank.5}'$status $body_bytes_sent "$http_referer" '
                    ${replacement.blank.5}'"$http_user_agent" "$http_x_forwarded_for"';
    ${replacement.blank}access_log  /var/log/nginx/access.log  main;
    ${replacement.blank}sendfile        on;
    ${replacement.blank}keepalive_timeout  ${replacement.main.http.timeout};
    ${replacement.blank}keepalive_requests ${replacement.main.http.requests};
    ${replacement.blank}server_names_hash_max_size ${replacement.main.http.hash.maxsize};
    ${replacement.blank}server_names_hash_bucket_size ${replacement.main.http.hash.bucketsize};
    ${replacement.blank}variables_hash_bucket_size ${replacement.main.http.hash.bucketsize};
    ${replacement.blank}variables_hash_max_size ${replacement.main.http.hash.maxsize};
    ${replacement.blank}map $request_uri $request_uri_no_args {
        ${replacement.blank}${replacement.blank}"~^(?P<path>[^?]*)(\?.*)?$" $path;
    ${replacement.blank}}
    ${replacement.websocket}
    ${replacement.blank}keyval_zone zone=forbiddenKV:512k;
    ${replacement.blank}keyval $request_uri_no_args $enableSeclimit zone=forbiddenKV;
    ${replacement.blank}include /etc/nginx/conf.d/*.conf;
    }
